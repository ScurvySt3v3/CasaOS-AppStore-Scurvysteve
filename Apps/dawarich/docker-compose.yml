# Configuration for Dawarich setup
name: dawarich

# Service definitions for the Dawarich application
services:
  # Redis service configuration
  dawarich_redis:
    container_name: dawarich_redis
    image: redis:7.0-alpine
    command: redis-server
    networks:
      - dawarich
    volumes:
      - /DATA/AppData/docker/dawarich/dawarich_shared:/data
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  # Database service configuration
  dawarich_db:
    container_name: dawarich_db
    image: postgis/postgis:14-3.5-alpine
    shm_size: 1G
    volumes:
      - /DATA/AppData/docker/dawarich/dawarich_db_data:/var/lib/postgresql/data
      - /DATA/AppData/docker/dawarich/dawarich_shared:/var/shared
    networks:
      - dawarich
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d dawarich_development" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  # Main Dawarich application service configuration
  dawarich_app:
    container_name: dawarich_app
    image: freikin/dawarich:latest
    volumes:
      - /DATA/AppData/docker/dawarich/dawarich_public:/var/app/public
      - /DATA/AppData/docker/dawarich/dawarich_watched:/var/app/tmp/imports/watched
    networks:
      - dawarich
    ports:
      - 3000:3000
    stdin_open: true
    tty: true
    entrypoint: web-entrypoint.sh
    command: ['bin/rails', 'server', '-p', '3000', '-b', '::']
    restart: on-failure
    environment:
      RAILS_ENV: development
      REDIS_URL: redis://dawarich_redis:6379/0
      DATABASE_HOST: dawarich_db
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: password
      DATABASE_NAME: dawarich_development
      MIN_MINUTES_SPENT_IN_CITY: 60
      APPLICATION_HOSTS: localhost
      TIME_ZONE: Europe/London
      APPLICATION_PROTOCOL: http
      DISTANCE_UNIT: km
      PROMETHEUS_EXPORTER_ENABLED: false
      PROMETHEUS_EXPORTER_HOST: 0.0.0.0
      PROMETHEUS_EXPORTER_PORT: 9394
      ENABLE_TELEMETRY: false
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO - http://127.0.0.1:3000/api/v1/health | grep -q '\"status\"\\s*:\\s*\"ok\"'" ]
      interval: 10s
      retries: 30
      start_period: 30s
      timeout: 10s
    depends_on:
      dawarich_db:
        condition: service_healthy
      dawarich_redis:
        condition: service_healthy

  # Sidekiq service configuration
  dawarich_sidekiq:
    container_name: dawarich_sidekiq
    image: freikin/dawarich:latest
    volumes:
      - /DATA/AppData/docker/dawarich/dawarich_public:/var/app/public
      - /DATA/AppData/docker/dawarich/dawarich_watched:/var/app/tmp/imports/watched
    networks:
      - dawarich
    stdin_open: true
    tty: true
    entrypoint: sidekiq-entrypoint.sh
    command: ['sidekiq']
    restart: on-failure
    environment:
      RAILS_ENV: development
      REDIS_URL: redis://dawarich_redis:6379/0
      DATABASE_HOST: dawarich_db
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: password
      DATABASE_NAME: dawarich_development
      APPLICATION_HOSTS: localhost
      BACKGROUND_PROCESSING_CONCURRENCY: 10
      APPLICATION_PROTOCOL: http
      DISTANCE_UNIT: km
      PROMETHEUS_EXPORTER_ENABLED: false
      PROMETHEUS_EXPORTER_HOST: dawarich_app
      PROMETHEUS_EXPORTER_PORT: 9394
      ENABLE_TELEMETRY: false
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: [ "CMD-SHELL", "bundle exec sidekiqmon processes | grep $${HOSTNAME}" ]
      interval: 10s
      retries: 30
      start_period: 30s
      timeout: 10s
    depends_on:
      dawarich_db:
        condition: service_healthy
      dawarich_redis:
        condition: service_healthy
      dawarich_app:
        condition: service_healthy

# Network configuration
networks:
  dawarich:
    driver: bridge

# CasaOS specific configuration
x-casaos:
  architectures:
    - amd64
    - arm64
  main: dawarich_app
  description:
    en_us: Self-hosted travel and location tracking application.
  tagline:
    en_us: Dawarich
  developer: "Freika"
  author: ScurvySt3v3
  icon: https://cdn.jsdelivr.net/gh/walkxcode/dashboard-icons/png/dawarich.png
  thumbnail: ""
  title:
    en_us: Dawarich
  category: ScurvySt3v3
  port_map: "3000"