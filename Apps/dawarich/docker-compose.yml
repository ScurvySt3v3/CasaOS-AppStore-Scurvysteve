name: dawarich

services:
  dawarich_redis:
    image: redis:7.0-alpine
    container_name: dawarich_redis
    command: redis-server
    networks:
      - dawarich
    volumes:
      - /DATA/AppData/$AppID/dawarich_shared:/data
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  dawarich_db:
    image: postgis/postgis:14-3.5-alpine
    shm_size: 1G
    container_name: dawarich_db
    volumes:
      - /DATA/AppData/$AppID/dawarich_db_data:/var/lib/postgresql/data
      - /DATA/AppData/$AppID/dawarich_shared:/var/shared
    networks:
      - dawarich
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d dawarich_development" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  dawarich_app:
    image: freikin/dawarich:latest
    container_name: dawarich_app
    volumes:
      - /DATA/AppData/$AppID/dawarich_public:/var/app/public
      - /DATA/AppData/$AppID/dawarich_watched:/var/app/tmp/imports/watched
    networks:
      - dawarich
    ports:
      - '3000:3000'
    stdin_open: true
    tty: true
    entrypoint: web-entrypoint.sh
    command: ['bin/rails', 'server', '-p', '3000', '-b', '::']
    restart: on-failure
    environment:
      RAILS_ENV: development
      REDIS_URL: redis://dawarich_redis:6379/0
      DATABASE_HOST: dawarich_db
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: password
      DATABASE_NAME: dawarich_development
      MIN_MINUTES_SPENT_IN_CITY: 60
      APPLICATION_HOSTS: localhost
      TIME_ZONE: Europe/London
      APPLICATION_PROTOCOL: http
      DISTANCE_UNIT: km
      PROMETHEUS_EXPORTER_ENABLED: false
      PROMETHEUS_EXPORTER_HOST: 0.0.0.0
      PROMETHEUS_EXPORTER_PORT: 9394
      ENABLE_TELEMETRY: false
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO - http://127.0.0.1:3000/api/v1/health | grep -q '\"status\"\\s*:\\s*\"ok\"'" ]
      interval: 10s
      retries: 30
      start_period: 30s
      timeout: 10s
    depends_on:
      dawarich_db:
        condition: service_healthy
      dawarich_redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: '4G'

  dawarich_sidekiq:
    image: freikin/dawarich:latest
    container_name: dawarich_sidekiq
    volumes:
      - /DATA/AppData/$AppID/dawarich_public:/var/app/public
      - /DATA/AppData/$AppID/dawarich_watched:/var/app/tmp/imports/watched
    networks:
      - dawarich
    stdin_open: true
    tty: true
    entrypoint: sidekiq-entrypoint.sh
    command: ['sidekiq']
    restart: on-failure
    environment:
      RAILS_ENV: development
      REDIS_URL: redis://dawarich_redis:6379/0
      DATABASE_HOST: dawarich_db
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: password
      DATABASE_NAME: dawarich_development
      APPLICATION_HOSTS: localhost
      BACKGROUND_PROCESSING_CONCURRENCY: 10
      APPLICATION_PROTOCOL: http
      DISTANCE_UNIT: km
      PROMETHEUS_EXPORTER_ENABLED: false
      PROMETHEUS_EXPORTER_HOST: dawarich_app
      PROMETHEUS_EXPORTER_PORT: 9394
      ENABLE_TELEMETRY: false
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: [ "CMD-SHELL", "bundle exec sidekiqmon processes | grep $${HOSTNAME}" ]
      interval: 10s
      retries: 30
      start_period: 30s
      timeout: 10s
    depends_on:
      dawarich_db:
        condition: service_healthy
      dawarich_redis:
        condition: service_healthy
      dawarich_app:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: '4G'

networks:
  dawarich:
    name: dawarich

x-casaos:
  architectures:
    - amd64
    - arm64
  main: dawarich_app
  store_app_id: dawarich
  category: Utilities
  author: ScurvySt3v3
  developer: Freika
  icon: https://cdn.jsdelivr.net/gh/Freika/dawarich@master/app/assets/images/favicon.jpeg
  screenshot_link:
    - https://cdn.jsdelivr.net/gh/Freika/dawarich@master/screenshots/map.jpeg
    - https://cdn.jsdelivr.net/gh/Freika/dawarich@master/screenshots/stats.jpeg
    - https://cdn.jsdelivr.net/gh/Freika/dawarich@master/screenshots/imports.jpeg
  thumbnail: https://cdn.jsdelivr.net/gh/Freika/dawarich@master/app/assets/images/favicon.jpeg
  description:
    en_us: |
      ## Dawarich: Self-hosted alternative to Google Location History

      Self-hosted alternative to Google Location History

    zh_cn: |
  tagline:
    en_us: Self-hosted alternative to Google Location History
    zh_cn: 自托管媒体管理解决方案
  title:
    en_us: Dawarich
  tips:
    before_install:
      en_us: |
        ⚠️ The project is under active development.
        ⚠️ Expect bugs and breaking changes.
  port_map: "3000"
  scheme: http
  index: /